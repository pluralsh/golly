package template

var functionDocs = map[string]string{
	"abbrev":                     "",
	"abbrevboth":                 "",
	"add":                        "Sums numbers. Accepts two or more inputs. `add 1 2 3` will return `6`.",
	"add1":                       "Increments by 1. `add1 3` will return `4`.",
	"add1f":                      "Increments float number by 1.",
	"addf":                       "Sums float numbers.",
	"adler32sum":                 "Receives a string and computes its Adler-32 checksum.",
	"ago":                        "Returns duration from current time in seconds resolution.",
	"all":                        "Takes a list of values ad returns true if all values are non-empty.",
	"any":                        "Takes a list of values ad returns true if any values are non-empty.",
	"append":                     "Appends a new item to existing list, creating a new list.",
	"atoi":                       "Converts a string to an integer.",
	"b32dec":                     "Decodes string from Base32 format.",
	"b32enc":                     "Encodes string with Base32 format.",
	"b64dec":                     "Decodes string from Base64 format.",
	"b64enc":                     "Encodes string with Base64 format.",
	"base":                       "",
	"bcrypt":                     "Receives a string and generates its bcrypt hash.",
	"biggest":                    "",
	"buildCustomCert":            "Allows customizing the certificate. It takes Base64 encoded PEM format certificate and private key as arguments and returns object with PEM-encoded certificate and key. Note that the returned object can be passed to the `genSignedCert` function to sign a certificate using this CA.",
	"camelcase":                  "",
	"cat":                        "",
	"ceil":                       "Returns greatest float value greater than or equal to input value. `ceil 123.001` will return `124.0`.",
	"chunk":                      "",
	"clean":                      "",
	"coalesce":                   "",
	"compact":                    "Accepts a list and removes entries with empty values.",
	"concat":                     "Concatenates arbitrary number of lists into one.",
	"contains":                   "Tests if one string is contained inside of another. `contains \"cat\" \"catch\"` will return `true`.",
	"date":                       "Formats date.",
	"dateInZone":                 "Same as `date` but with a timezone.",
	"dateModify":                 "",
	"date_in_zone":               "",
	"date_modify":                "",
	"decryptAES":                 "Receives a Base64 string encoded by the AES-256 CBC algorithm and returns the decoded text.",
	"deepCopy":                   "",
	"deepEqual":                  "",
	"default":                    "",
	"derivePassword":             "",
	"dict":                       "",
	"dig":                        "",
	"dir":                        "",
	"div":                        "Performs integer division.",
	"divf":                       "",
	"duration":                   "Formats a given amount of seconds as a `time.Duration`.",
	"durationRound":              "",
	"empty":                      "",
	"encryptAES":                 "Encrypts text with AES-256 CBC and returns a Base64 encoded string.",
	"env":                        "Reads environment variable.",
	"expandenv":                  "Substitutes environment variable in a string.",
	"ext":                        "Returns file extension. `ext \"foo.bar\"` will return `\"bar\"`.",
	"fail":                       "Unconditionally returns an empty string and an error with the specified text. This is useful in scenarios where other conditionals have determined that template rendering should fail.",
	"first":                      "Returns head item on a list.",
	"float64":                    "Converts to a `float64`.",
	"floor":                      "Returns the greatest float value greater than or equal to input value. `floor 123.9999` will return `123.0`.",
	"fromJson":                   "",
	"genCA":                      "Generates a new, self-signed x509 SSL Certificate Authority using 2048-bit RSA private key. It takes subject common name (CN) and cert validity duration in days as parameters. It returns object with PEM-encoded certificate and key. Note that the returned object can be passed to the `genSignedCert` function to sign a certificate using this CA.",
	"genCAWithKey":               "Generates a new, self-signed x509 SSL Certificate Authority using given private key. It takes subject common name (CN), cert validity duration in days and private key (PEM-encoded; DSA keys are not supported) as parameters. It returns object with PEM-encoded certificate and key. Note that the returned object can be passed to the `genSignedCert` function to sign a certificate using this CA.",
	"genPrivateKey":              "",
	"genSelfSignedCert":          "Generates an SSL self-signed certificate.",
	"genSelfSignedCertWithKey":   "",
	"genSignedCert":              "Generates an SSL certificate and key based on a given CA.",
	"genSignedCertWithKey":       "",
	"get":                        "",
	"getHostByName":              "",
	"has":                        "Checks if a list has a particular element.",
	"hasKey":                     "",
	"hasPrefix":                  "",
	"hasSuffix":                  "",
	"htmlDate":                   "Formats a date for inserting into HTML date picker input field.",
	"htmlDateInZone":             "Same as `htmlDate` but with a timezone.",
	"htpasswd":                   "",
	"indent":                     "",
	"initial":                    "Compliments `last` by retuning all but the last element.",
	"initials":                   "",
	"int":                        "Converts to a `int`.",
	"int64":                      "Converts to a `int64`.",
	"isAbs":                      "Checks whether a path is absolute.",
	"join":                       "",
	"kebabcase":                  "",
	"keys":                       "",
	"kindIs":                     "",
	"kindOf":                     "",
	"last":                       "",
	"list":                       "",
	"lower":                      "Converts the entire string to lowercase. `upper \"HELLO\"` will return `hello`.",
	"max":                        "Returns the largest of a series of integers. `max 1 2 3` will return `3`.",
	"maxf":                       "",
	"merge":                      "",
	"mergeOverwrite":             "",
	"min":                        "Returns the smallest of a series of integers. `min 1 2 3` will return `1`.",
	"minf":                       "",
	"mod":                        "",
	"mul":                        "Multiples numbers. Accepts two or more inputs. `mul 1 2 3` will return `6`.",
	"mulf":                       "",
	"mustAppend":                 "Appends a new item to existing list, creating a new list. Like other `must` functions instead of panicking when there is a problem it will return an error to the template engine.",
	"mustChunk":                  "",
	"mustCompact":                "Accepts a list and removes entries with empty values. Like other `must` functions instead of panicking when there is a problem it will return an error to the template engine.",
	"mustDateModify":             "",
	"mustDeepCopy":               "",
	"mustFirst":                  "Returns head item on a list. Like other `must` functions instead of panicking when there is a problem it will return an error to the template engine.",
	"mustFromJson":               "",
	"mustHas":                    "Checks if a list has a particular element. Like other `must` functions instead of panicking when there is a problem it will return an error to the template engine.",
	"mustInitial":                "Compliments `last` by retuning all but the last element. Like other `must` functions instead of panicking when there is a problem it will return an error to the template engine.",
	"mustLast":                   "",
	"mustMerge":                  "",
	"mustMergeOverwrite":         "",
	"mustPrepend":                "",
	"mustPush":                   "",
	"mustRegexFind":              "",
	"mustRegexFindAll":           "",
	"mustRegexMatch":             "",
	"mustRegexReplaceAll":        "",
	"mustRegexReplaceAllLiteral": "",
	"mustRegexSplit":             "",
	"mustRest":                   "Gets tail of the list (everything but the first item). Like other `must` functions instead of panicking when there is a problem it will return an error to the template engine.",
	"mustReverse":                "Produces a new list with the reversed elements of the given list. Like other `must` functions instead of panicking when there is a problem it will return an error to the template engine.",
	"mustSlice":                  "",
	"mustToDate":                 "Converts a string to a date. The first argument is the date layout and the second is the date string. If the string canâ€™t be converted it returns the zero value. Like other `must` functions instead of panicking when there is a problem it will return an error to the template engine.",
	"mustToJson":                 "",
	"mustToPrettyJson":           "",
	"mustToRawJson":              "",
	"mustUniq":                   "Generates a list with all of the duplicates removed. Like other `must` functions instead of panicking when there is a problem it will return an error to the template engine.",
	"mustWithout":                "Filters items out of a list. Like other `must` functions instead of panicking when there is a problem it will return an error to the template engine.",
	"must_date_modify":           "",
	"nindent":                    "",
	"nospace":                    "Removes all whitespace from a string. `nospace \"hello w o r l d\"` will return `helloworld`.",
	"omit":                       "",
	"osBase":                     "Returns the last element of a file path. `osBase \"/foo/bar/baz\"` and `osBase \"C:\\\\foo\\\\bar\\\\baz\"` will return `\"baz\"` on Linux and Windows, respectively.",
	"osClean":                    "Cleans up a path. `osClean \"/foo/bar/../baz\"` and `osClean \"C:\\\\foo\\\\bar\\\\..\\\\baz\"` will resolve the `..` and return `foo/baz` on Linux and `C:\\foo\\baz` on Windows.",
	"osDir":                      "Returns the directory, stripping the last part of the path. So `osDir \"/foo/bar/baz\"` returns `/foo/bar` on Linux, and `osDir \"C:\\\\foo\\\\bar\\\\baz\"` returns `C:\\\\foo\\\\bar` on Windows.",
	"osExt":                      "Return the file extension. `osExt \"/foo.bar\"` and `osExt \"C:\\\\foo.bar\"` will return `.bar` on Linux and Windows, respectively.",
	"osIsAbs":                    "Checks whether a file path is absolute.",
	"pick":                       "",
	"pluck":                      "",
	"plural":                     "",
	"prepend":                    "",
	"push":                       "",
	"quote":                      "",
	"randAlpha":                  "",
	"randAlphaNum":               "",
	"randAscii":                  "",
	"randBytes":                  "Accepts a count `N` and generates cryptographically secure random sequence of `N` bytes. The sequence is returned as a Base64 encoded string.",
	"randInt":                    "Returns a random integer value from min (inclusive) to max (exclusive). `randInt 12 30` will produce a random number in the range from 12 to 30.",
	"randNumeric":                "",
	"regexFind":                  "",
	"regexFindAll":               "",
	"regexMatch":                 "",
	"regexQuoteMeta":             "",
	"regexReplaceAll":            "",
	"regexReplaceAllLiteral":     "",
	"regexSplit":                 "",
	"repeat":                     "",
	"replace":                    "",
	"rest":                       "Gets tail of the list (everything but the first item).",
	"reverse":                    "Produces a new list with the reversed elements of the given list.",
	"round":                      "Returns a float value with the remainder rounded to the given number to digits after the decimal point. `round 123.55555 3` will return `123.556`.",
	"semver":                     "",
	"semverCompare":              "",
	"seq":                        "Works like Bash `seq` command. Specify 1 parameter (`end`) to generate all counting integers between 1 and `end` inclusive. Specify 2 parameters (`start` and `end`) to generate all counting integers between `start` and `end` inclusive incrementing or decrementing by 1. Specify 3 parameters (`start`, `step` and `end) to generate all counting integers between `start` and `end` inclusive incrementing or decrementing by `step`.",
	"set":                        "",
	"sha1sum":                    "",
	"sha256sum":                  "",
	"shuffle":                    "",
	"slice":                      "",
	"snakecase":                  "",
	"sortAlpha":                  "",
	"split":                      "",
	"splitList":                  "",
	"splitn":                     "",
	"squote":                     "",
	"sub":                        "",
	"subf":                       "",
	"substr":                     "",
	"swapcase":                   "",
	"ternary":                    "Takes two values and a test value. If the test value is true, the first value will be returned. If the test value is false, the second value will be returned. This is similar to the C ternary operator. `ternary \"foo\" \"bar\" true` or `true | \"foo\" \"bar\"` will return `\"foo\"`.",
	"title":                      "Converts a string to title case. `title \"hello world\"` will return `\"Hello World\"`.",
	"toDate":                     "Converts a string to a date. The first argument is the date layout and the second is the date string. If the string canâ€™t be converted it returns the zero value.",
	"toDecimal":                  "Converts a Unix octal to a `int64`.`\"0777\" | toDecimal` will convert `0777` to `511` and return the value as `int64`.",
	"toJson":                     "",
	"toPrettyJson":               "",
	"toRawJson":                  "Encodes an item into JSON string with HTML characters unescaped. `toRawJson .Item` will return unescaped JSON string representation of `.Item`.",
	"toString":                   "Converts to a string.",
	"toStrings":                  "Converts a list, slice or array to a list of strings. `list 1 2 3 | toString` converts `1`, `2` and `3` to strings and then returns them as a list.",
	"trim":                       "Removes space from either side of a string. `trim \"  hello  \"` will return `hello`.",
	"trimAll":                    "Removes given characters from the front or back of a string. `trimAll \"$\" \"$5.00\"` will return `5.00` (as a string).",
	"trimPrefix":                 "Trims just the prefix from a string. `trimPrefix \"-\" \"-hello\"` will return `hello`.",
	"trimSuffix":                 "Trims just the suffix from a string. `trimSuffix \"-\" \"hello-\"` will return `hello`.",
	"trimall":                    "",
	"trunc":                      "",
	"tuple":                      "",
	"typeIs":                     "",
	"typeIsLike":                 "",
	"typeOf":                     "",
	"uniq":                       "Generates a list with all of the duplicates removed.",
	"unixEpoch":                  "Returns the seconds since the Unix epoch.",
	"unset":                      "Given a map and a key it deletes the key from the map. It returns dictionary. Note that if the key is not found this operation will simply return. No error will be generated.",
	"until":                      "Builds a range of integers. `until 5` will return a list `[0, 1, 2, 3, 4]`.",
	"untilStep":                  "Like `until` generates a list of counting integers but it allows to define a start, stop and step. `untilStep 3 6 2` will return `[3, 5]` by starting with 3 and adding 2 until it is equal or greater than 6.",
	"untitle":                    "Removes title casing. `untitle \"Hello World\"` will return `\"hello world\"`.",
	"upper":                      "Converts the entire string to uppercase. `upper \"hello\"` will return `HELLO`.",
	"urlJoin":                    "Joins map produced by `urlParse` to produce URL string. `urlJoin (dict \"fragment\" \"fragment\" \"host\" \"host:80\" \"path\" \"/path\" \"query\" \"query\" \"scheme\" \"http\")` will return `proto://host:80/path?query#fragment`.",
	"urlParse":                   "Parses string for URL and produces dict with URL parts. For more info check https://golang.org/pkg/net/url/#URL.",
	"values":                     "",
	"without":                    "Filters items out of a list. It can take more than one filter.",
	"wrap":                       "Wraps text at a given column count. `wrap 80 $text` will wrap the string in `$text` at 80 columns.",
	"wrapWith":                   "Works as `wrap` but lets you specify the string to wrap with (`wrap` uses `\n`). `wrapWith` 5 \"\\t\" \"Hello world\"` will return `hello world` (where the whitespace is an ASCII tab character).",
}
