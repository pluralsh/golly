package template

var functionDocs = map[string]FilterFunctionDocumentation{
	"abbrev": {
		Description: "Truncates a string with ellipses.",
		Parameters:  []string{"Max length", "String to truncate"},
		Example:     "`abbrev 5 \"hello world\"` returns `he...`.",
	},
	"abbrevboth": {
		Description: "Truncates both sides of a string with ellipses.",
		Parameters:  []string{"Left offset", "Max length", "String to truncate"},
		Example:     "`abbrevboth 5 10 \"1234 5678 9123\"` returns `...5678...`.",
	},
	"add": {
		Description: "Sums numbers. Accepts two or more inputs.",
		Parameters:  []string{"Number to add", "Number to add", "..."},
		Example:     "`add 1 2 3` returns `6`.",
	},
	"add1": {
		Description: "Increments by 1.",
		Parameters:  []string{"Number to increment"},
		Example:     "`add1 3` returns `4`.",
	},
	"add1f": {
		Description: "Increments float number by 1.",
		Parameters:  []string{"Float number to increment"},
		Example:     "`add1 3.0` returns `4.0`.",
	},
	"addf": {
		Description: "Sums float numbers. Accepts two or more inputs.",
		Parameters:  []string{"Float number", "Float number", "..."},
		Example:     "`add 1.1 2.2 3.3` returns `6.6`.",
	},
	"adler32sum": {
		Description: "Computes Adler-32 checksum of a string.",
		Parameters:  []string{"String"},
		Example:     "`adler32sum \"Hello world!\"`.",
	},
	"ago": {
		Description: "Returns duration from current time (`time.Now`) in seconds resolution.",
		Parameters:  []string{"Date"},
		Example:     "`ago .CreatedAt` will return something like `2h34m7s`.",
	},
	"all": {
		Description: "Takes a list of values ad returns true if all values are non-empty.",
		Parameters:  []string{"List"},
	},
	"any": {
		Description: "Takes a list of values ad returns true if any values are non-empty.",
		Parameters:  []string{"List"},
	},
	"append": {
		Description: "Appends a new item to existing list, creating a new list.",
		Parameters:  []string{"List", "Item to append"},
		Example:     "`append ( list 1 2 3 ) 5` returns `[1, 2, 3, 5]`.",
	},
	"atoi": {
		Description: "Converts a string to an integer.",
		Parameters:  []string{"String to convert"},
	},
	"b32dec": {
		Description: "Decodes string from Base32 format.",
		Parameters:  []string{"String to decode"},
	},
	"b32enc": {
		Description: "Encodes string with Base32 format.",
		Parameters:  []string{"String to encode"},
	},
	"b64dec": {
		Description: "Decodes string from Base64 format.",
		Parameters:  []string{"String to decode"},
	},
	"b64enc": {
		Description: "Encodes string with Base64 format.",
		Parameters:  []string{"String to encode"},
	},
	"base": {
		Description: "Returns the last element of a path.",
		Parameters:  []string{"Path"},
		Example:     "`base \"foo/bar/baz\"` returns `baz`.",
	},
	"bcrypt": {
		Description: "Generates bcrypt hash of a string.",
		Parameters:  []string{"String"},
	},
	"biggest": {},
	"buildCustomCert": {
		Description: "Allows customizing the certificate. It returns object with PEM-encoded certificate and key. Note that the returned object can be passed to the `genSignedCert` function to sign a certificate using this CA.",
		Parameters:  []string{"Base64 encoded PEM format certificate", "Base64 encoded PEM format private key"},
		Example:     "`$ca := buildCustomCert \"base64-encoded-ca-crt\" \"base64-encoded-ca-key\"`",
	},
	"camelcase": {},
	"cat":       {},
	"ceil": {
		Description: "Returns greatest float value greater than or equal to input value.",
		Parameters:  []string{"Input value"},
		Example:     "`ceil 123.001` will return `124.0`.",
	},
	"chunk":    {},
	"clean":    {},
	"coalesce": {},
	"compact": {
		Description: "Accepts a list and removes entries with empty values.",
		Parameters:  []string{"List"},
	},
	"concat": {
		Description: "Concatenates arbitrary number of lists into one.",
		Parameters:  []string{"List", "..."},
	},
	"contains": {
		Description: "Tests if one string is contained inside of another.",
		Parameters:  []string{"Substring", "String"},
		Example:     "`contains \"cat\" \"catch\"` returns `true`.",
	},
	"date": {
		Description: "Formats date. See https://pauladamsmith.com/blog/2011/05/go_time.html.",
		Parameters:  []string{"Date layout"},
	},
	"dateInZone": {
		Description: "Same as `date` but with a timezone.",
		Parameters:  []string{"Date layout", "Date to format", "Timezone"},
	},
	"dateModify":   {},
	"date_in_zone": {},
	"date_modify":  {},
	"decryptAES": {
		Description: "Receives a Base64 string encoded by the AES-256 CBC algorithm and returns the decoded text.",
		Parameters:  []string{"Base64 string encoded by the AES-256 CBC algorithm"},
	},
	"deepCopy":       {},
	"deepEqual":      {},
	"default":        {},
	"derivePassword": {},
	"dict":           {},
	"dig":            {},
	"dir":            {},
	"div": {
		Description: "Performs integer division.",
	},
	"divf": {},
	"duration": {
		Description: "Formats a given amount of seconds as a `time.Duration`.",
		Parameters:  []string{"Amount of seconds"},
		Example:     "`duration \"95\"` returns `1m35s`.",
	},
	"durationRound": {},
	"empty":         {},
	"encryptAES": {
		Description: "Encrypts text with AES-256 CBC and returns a Base64 encoded string.",
		Parameters:  []string{"Secret key", "Text to encrypt"},
		Example:     "`encryptAES \"secretkey\" \"plaintext\"`.",
	},
	"env": {
		Description: "Reads environment variable.",
		Parameters:  []string{"Environment variable name"},
		Example:     "`env \"HOME\"`",
	},
	"expandenv": {
		Description: "Substitutes environment variable in a string.",
		Parameters:  []string{"String to expand"},
		Example:     "`expandenv \"Your path is set to $PATH\"`",
	},
	"ext": {
		Description: "Returns file extension.",
		Parameters:  []string{"File path"},
		Example:     "`ext \"foo.bar\"` will return `\"bar\"`",
	},
	"fail": {
		Description: "Unconditionally returns an empty string and an error with the specified text. This is useful in scenarios where other conditionals have determined that template rendering should fail.",
		Parameters:  []string{"Error message"},
		Example:     "`fail \"Please accept the end user license agreement\"`",
	},
	"first": {
		Description: "Returns head item on a list.",
		Parameters:  []string{"List"},
	},
	"float64": {
		Description: "Converts to a `float64`",
		Parameters:  []string{"Value to convert, it can be for example an integer or a string"},
	},
	"floor": {
		Description: "Returns the greatest float value greater than or equal to input value.",
		Parameters:  []string{"Input value"},
		Example:     "`floor 123.9999` will return `123.0`",
	},
	"fromJson": {},
	"genCA": {
		Description: "Generates a new, self-signed x509 SSL Certificate Authority using 2048-bit RSA private key. It returns object with PEM-encoded certificate and key. Note that the returned object can be passed to the `genSignedCert` function to sign a certificate using this CA.",
		Parameters:  []string{"Subject common name (CN)", "Cert validity duration in days"},
	},
	"genCAWithKey": {
		Description: "Generates a new, self-signed x509 SSL Certificate Authority using given private key. It returns object with PEM-encoded certificate and key. Note that the returned object can be passed to the `genSignedCert` function to sign a certificate using this CA.",
		Parameters:  []string{"Subject common name (CN)", "Cert validity duration in days", "private key (PEM-encoded; DSA keys are not supported)"},
	},
	"genPrivateKey": {},
	"genSelfSignedCert": {
		Description: "Generates an SSL self-signed certificate.",
	},
	"genSelfSignedCertWithKey": {},
	"genSignedCert": {
		Description: "Generates an SSL certificate and key based on a given CA.",
	},
	"genSignedCertWithKey": {},
	"get":                  {},
	"getHostByName":        {},
	"has": {
		Description: "Checks if a list has a particular element. It will panic if there is a problem.",
		Parameters:  []string{"Element to find", "List"},
		Example:     "`has 4 $myList`",
	},
	"hasKey":    {},
	"hasPrefix": {},
	"hasSuffix": {},
	"htmlDate": {
		Description: "Formats a date for inserting into HTML date picker input field.",
		Parameters:  []string{"Date"},
		Example:     "`now | htmlDate`.",
	},
	"htmlDateInZone": {
		Description: "Same as `htmlDate` but with a timezone.",
		Parameters:  []string{"Date", "Timezone"},
		Example:     "`htmlDateInZone (now) \"UTC\"`.",
	},
	"htpasswd": {},
	"indent":   {},
	"initial": {
		Description: "Compliments `last` by retuning all but the last element. It will panic if there is a problem.",
		Parameters:  []string{"List"},
	},
	"initials": {},
	"int": {
		Description: "Converts to a `int`.",
		Parameters:  []string{"Value to convert"},
	},
	"int64": {
		Description: "Converts to a `int64`.",
		Parameters:  []string{"Value to convert"},
	},
	"isAbs": {
		Description: "Checks whether a path is absolute.",
		Parameters:  []string{"File path"},
	},
	"join":      {},
	"kebabcase": {},
	"keys": {
		Description: "Returns list of all keys from a map.",
		Parameters:  []string{"Map"},
	},
	"kindIs": {},
	"kindOf": {},
	"last":   {},
	"list":   {},
	"lower": {
		Description: "Converts the entire string to lowercase.",
		Parameters:  []string{"String to transform"},
		Example:     "`upper \\\"HELLO\\\"` will return `hello`.",
	},
	"max": {
		Description: "Returns the largest of a series of integers.",
		Parameters:  []string{"Number", "Number", "..."},
		Example:     "`max 1 2 3` will return `3`.",
	},
	"maxf": {
		Description: "Returns the largest of a series of floats.",
		Parameters:  []string{"Float number", "Float number", "..."},
		Example:     "`max 1 2 3.65` will return `3.65`.",
	},
	"merge":          {},
	"mergeOverwrite": {},
	"min": {
		Description: "Returns the smallest of a series of integers.",
		Parameters:  []string{"Number", "Number", "..."},
		Example:     "`min 1 2 3` will return `1`.",
	},
	"minf": {
		Description: "Returns the smallest of a series of floats.",
		Parameters:  []string{"Float number", "Float number", "..."},
		Example:     "`min 1.3 2 3` will return `1.3`.",
	},
	"mod": {},
	"mul": {
		Description: "Multiplies numbers. Accepts two or more inputs.",
		Parameters:  []string{"Number", "Number", "..."},
		Example:     "`mul 1 2 3` will return `6`.",
	},
	"mulf": {
		Description: "Multiplies float numbers. Accepts two or more inputs.",
		Parameters:  []string{"Float number", "Float number", "..."},
		Example:     "`mulf 1.5 2 2` returns `6`.",
	},
	"mustAppend": {
		Description: "Appends a new item to existing list, creating a new list. It will return an error to the template engine if there is a problem.",
		Parameters:  []string{"List", "Item to append"},
		Example:     "`mustAppend ( list 1 2 3 ) 5` returns `[1, 2, 3, 5]`.",
	},
	"mustChunk": {},
	"mustCompact": {
		Description: "Accepts a list and removes entries with empty values. It will return an error to the template engine if there is a problem.",
		Parameters:  []string{"List"},
	},
	"mustDateModify": {},
	"mustDeepCopy":   {},
	"mustFirst": {
		Description: "Returns head item on a list. It will return an error to the template engine if there is a problem.",
		Parameters:  []string{"List"},
		Example:     "`mustFirst $myList`",
	},
	"mustFromJson": {},
	"mustHas": {
		Description: "Checks if a list has a particular element. It will return an error to the template engine if there is a problem.",
		Parameters:  []string{"Element to find", "List"},
		Example:     "`mustHas 4 $myList`",
	},
	"mustInitial": {
		Description: "Compliments `last` by retuning all but the last element. It will return an error to the template engine ifd there is a problem.",
		Parameters:  []string{"List"},
		Example:     "`mustInitial $myList`",
	},
	"mustLast":                   {},
	"mustMerge":                  {},
	"mustMergeOverwrite":         {},
	"mustPrepend":                {},
	"mustPush":                   {},
	"mustRegexFind":              {},
	"mustRegexFindAll":           {},
	"mustRegexMatch":             {},
	"mustRegexReplaceAll":        {},
	"mustRegexReplaceAllLiteral": {},
	"mustRegexSplit":             {},
	"mustRest": {
		Description: "Gets tail of the list (everything but the first item). It will return an error to the template engine if there is a problem.",
		Parameters:  []string{"List"},
		Example:     "`mustRest $myList`",
	},
	"mustReverse": {
		Description: "Produces a new list with the reversed elements of the given list. It will return an error to the template engine if there is a problem.",
		Parameters:  []string{"List"},
		Example:     "`mustReverse $myList`",
	},
	"mustSlice": {},
	"mustToDate": {
		Description: "Converts a string to a date. If the string can’t be converted it returns the zero value. It will return an error to the template engine if there is a problem.",
		Parameters:  []string{"Date layout", "Date string"},
	},
	"mustToJson":       {},
	"mustToPrettyJson": {},
	"mustToRawJson":    {},
	"mustUniq": {
		Description: "Generates a list with all of the duplicates removed. It will return an error to the template engine if there is a problem.",
		Parameters:  []string{"List"},
	},
	"mustWithout": {
		Description: "Filters items out of a list. It will return an error to the template engine if there is a problem.",
		Parameters:  []string{"CList", "Item to filter out"},
		Example:     "`mustWithout ( list 1 2 3 4 5) 1 3 5` returns `[2, 4]`.",
	},
	"must_date_modify": {},
	"nindent":          {},
	"nospace": {
		Description: "Removes all whitespace from a string.",
		Parameters:  []string{"String to transform"},
		Example:     "`nospace \"hello w o r l d\"` will return `helloworld`.",
	},
	"omit": {},
	"osBase": {
		Description: "Returns the last element of a file path.",
		Parameters:  []string{"File path"},
		Example:     "`osClean \"/foo/bar/../baz\"` and `osClean \"C:\\\\foo\\\\bar\\\\..\\\\baz\"` will resolve the `..` and return `foo/baz` on Linux and `C:\\foo\\baz` on Windows.",
	},
	"osClean": {
		Description: "Cleans up a path.",
		Parameters:  []string{"File path"},
		Example:     "`osClean \"/foo/bar/../baz\"` and `osClean \"C:\\\\foo\\\\bar\\\\..\\\\baz\"` will resolve the `..` and return `foo/baz` on Linux and `C:\\foo\\baz` on Windows.",
	},
	"osDir": {
		Description: "Returns the directory, stripping the last part of the path.",
		Parameters:  []string{"File path"},
		Example:     "`osDir \"/foo/bar/baz\"` returns `/foo/bar` on Linux, and `osDir \"C:\\\\foo\\\\bar\\\\baz\"` returns `C:\\\\foo\\\\bar` on Windows.",
	},
	"osExt": {
		Description: "Return the file extension.",
		Parameters:  []string{"File path"},
		Example:     "`osExt \"/foo.bar\"` and `osExt \"C:\\\\foo.bar\"` will return `.bar` on Linux and Windows, respectively.",
	},
	"osIsAbs": {
		Description: "Checks whether a file path is absolute.",
		Parameters:  []string{"File path"},
	},
	"pick":         {},
	"pluck":        {},
	"plural":       {},
	"prepend":      {},
	"push":         {},
	"quote":        {},
	"randAlpha":    {},
	"randAlphaNum": {},
	"randAscii":    {},
	"randBytes": {
		Description: "Accepts a count and generates cryptographically secure random sequence of bytes. The sequence is returned as a Base64 encoded string.",
		Parameters:  []string{"Number of bytes to generate"},
	},
	"randInt": {
		Description: "Returns a random integer value from min (inclusive) to max (exclusive).",
		Parameters:  []string{"Min value (inclusive)", "Max value (exclusive)"},
		Example:     " `randInt 12 30` will produce a random number in the range from 12 to 30.",
	},
	"randNumeric":            {},
	"regexFind":              {},
	"regexFindAll":           {},
	"regexMatch":             {},
	"regexQuoteMeta":         {},
	"regexReplaceAll":        {},
	"regexReplaceAllLiteral": {},
	"regexSplit":             {},
	"repeat":                 {},
	"replace":                {},
	"rest": {
		Description: "Gets tail of the list (everything but the first item).",
		Parameters:  []string{"List"},
	},
	"reverse": {
		Description: "Produces a new list with the reversed elements of the given list.",
		Parameters:  []string{"List"},
	},
	"round": {
		Description: "Returns a float value with the remainder rounded to the given number to digits after the decimal point.",
		Parameters:  []string{"Float number", "Number of digits to round to"},
		Example:     "`round 123.55555 3` will return `123.556`.",
	},
	"semver":        {},
	"semverCompare": {},
	"seq": {
		Description: "Works like Bash `seq` command. Specify 1 parameter (`end`) to generate all counting integers between 1 and `end` inclusive. Specify 2 parameters (`start` and `end`) to generate all counting integers between `start` and `end` inclusive incrementing or decrementing by 1. Specify 3 parameters (`start`, `step` and `end`) to generate all counting integers between `start` and `end` inclusive incrementing or decrementing by `step`.",
	},
	"set":       {},
	"sha1sum":   {},
	"sha256sum": {},
	"sha512sum": {},
	"shuffle":   {},
	"slice":     {},
	"snakecase": {},
	"sortAlpha": {},
	"split":     {},
	"splitList": {},
	"splitn":    {},
	"squote":    {},
	"sub":       {},
	"subf":      {},
	"substr":    {},
	"swapcase":  {},
	"ternary": {
		Description: "Takes two values and a test value. If the test value is true, the first value will be returned. If the test value is false, the second value will be returned. This is similar to the C ternary operator.",
		Parameters:  []string{"First value", "Second value", "Test value"},
		Example:     "`ternary \"foo\" \"bar\" true` or `true | \"foo\" \"bar\"` will return `\"foo\"`.",
	},
	"title": {
		Description: "Converts a string to title case.",
		Parameters:  []string{"String"},
		Example:     "`title \"hello world\"` returns `\"Hello World\"`.",
	},
	"toDate": {
		Description: "Converts a string to a date. If the string can’t be converted it returns the zero value.",
		Parameters:  []string{"Date layout", "Date string"},
	},
	"toDecimal": {
		Description: "Converts a Unix octal to a `int64`.",
		Parameters:  []string{"Unix octal"},
		Example:     "`\"0777\" | toDecimal` will convert `0777` to `511` and return the value as `int64`.",
	},
	"toJson": {
		Description: "Encodes an item into JSON string. If the item cannot be converted to JSON the function will return an empty string.",
		Parameters:  []string{"An item to encode"},
		Example:     "`toJson .Item` returns JSON string representation of `.Item`.",
	},
	"toPrettyJson": {
		Description: "Encodes an item into pretty (intended) JSON string.",
		Parameters:  []string{"An item to encode"},
		Example:     "`toPrettyJson .Item` returns intended JSON string representation of `.Item`.",
	},
	"toRawJson": {
		Description: "Encodes an item into JSON string with HTML characters unescaped.",
		Parameters:  []string{"An item to encode"},
		Example:     "`toRawJson .Item` returns unescaped JSON string representation of `.Item`.",
	},
	"toString": {
		Description: "Converts to a string.",
		Parameters:  []string{"Value"},
	},
	"toStrings": {
		Description: "Converts a list, slice or array to a list of strings.",
		Parameters:  []string{"List"},
		Example:     "`list 1 2 3 | toString` converts `1`, `2` and `3` to strings and then returns them as a list.",
	},
	"trim": {
		Description: "Removes space from either side of a string.",
		Parameters:  []string{"String to trim"},
		Example:     "`trim \"  hello  \"` will return `hello`.",
	},
	"trimAll": {
		Description: "Removes given characters from the front or back of a string.",
		Parameters:  []string{"Character to remove", "String to trim"},
		Example:     "`trimAll \"$\" \"$5.00\"` will return `5.00` (as a string).",
	},
	"trimPrefix": {
		Description: "Trims just the prefix from a string.",
		Parameters:  []string{"Character to remove", "String to trim"},
		Example:     "`trimPrefix \"-\" \"-hello\"` will return `hello`.",
	},
	"trimSuffix": {
		Description: "Trims just the suffix from a string.",
		Parameters:  []string{"Character to remove", "String to trim"},
		Example:     "`trimSuffix \"-\" \"hello-\"` will return `hello`.",
	},
	"trimall":    {},
	"trunc":      {},
	"tuple":      {},
	"typeIs":     {},
	"typeIsLike": {},
	"typeOf":     {},
	"uniq": {
		Description: "Generates a list with all of the duplicates removed.",
		Parameters:  []string{"List"},
	},
	"unixEpoch": {
		Description: "Returns the seconds since the Unix epoch for a time.",
		Parameters:  []string{"Time (`time.Time`)"},
		Example:     "`now | unixEpoch`",
	},
	"unset": {
		Description: "Given a map and a key it deletes the key from the map. It returns dictionary. Note that if the key is not found this operation will simply return. No error will be generated.",
		Parameters:  []string{"Map", "Key of an item to delete"},
	},
	"until": {
		Description: "Builds a range of integers.",
		Parameters:  []string{"Max value (exclusive)"},
		Example:     "`until 5` will return a list `[0, 1, 2, 3, 4]`.",
	},
	"untilStep": {
		Description: "Like `until` generates a list of counting integers but it allows to define a start, stop and step.",
		Parameters:  []string{"Start value (inclusive)", "Max value (exclusive)", "Step"},
		Example:     "`untilStep 3 6 2` will return `[3, 5]` by starting with 3 and adding 2 until it is equal or greater than 6.",
	},
	"untitle": {
		Description: "Removes title casing.",
		Parameters:  []string{"String to transform"},
		Example:     "`untitle \"Hello World\"` returns `\"hello world\"`.",
	},
	"upper": {
		Description: "Converts the entire string to uppercase.",
		Parameters:  []string{"String to transform"},
		Example:     "`upper \"hello\"` returns `HELLO`",
	},
	"urlJoin": {
		Description: "Joins map produced by `urlParse` to produce URL string.",
		Parameters:  []string{"Map produced by `urlParse`"},
		Example:     "`urlJoin (dict \"fragment\" \"fragment\" \"host\" \"host:80\" \"path\" \"/path\" \"query\" \"query\" \"scheme\" \"http\")` returns `proto://host:80/path?query#fragment`.",
	},
	"urlParse": {
		Description: "Parses string for URL and produces dict with URL parts. For more info check https://golang.org/pkg/net/url/#URL.",
		Parameters:  []string{"String with URL"},
	},
	"values": {
		Description: "Returns list of all values from a map.",
		Parameters:  []string{"Map"},
	},
	"without": {
		Description: "Filters items out of a list. It can take more than one filter.",
		Parameters:  []string{"List", "Item to filter out"},
		Example:     "`without ( list 1 2 3 4 5) 1 3 5` returns `[2, 4]`.",
	},
	"wrap": {
		Description: "Wraps text at a given column count.",
		Parameters:  []string{"Column count", "Text"},
		Example:     "`wrap 80 $text` will wrap the string in `$text` at 80 columns.",
	},
	"wrapWith": {
		Description: "Works as `wrap` but lets you specify the string to wrap with (`wrap` uses `\\n`).",
		Parameters:  []string{"Column count", "String to wrap with", "Text"},
		Example:     "`wrapWith 5 \"\\t\" \"Hello world\"` returns `hello world` (where the whitespace is an ASCII tab character).",
	},
}
